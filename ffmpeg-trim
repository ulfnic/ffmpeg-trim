#!/usr/bin/env bash
[[ $DEBUG ]] && set -x
set -o errexit


help_doc() {
	cat <<-'HelpDoc'

		ffmpeg-trim
		  -s|--start-time <START TIME>
		  -f|--finish-time <FINISH TIME>
		  -i|--input-file <INPUT FILE>
		  -c|--clobber
		  -h|--help
		  <OUTPUT FILE>

		FILE
		  A file compatible with ffmpeg as an input or output.
		  - is an alias for /dev/fd/0 for INPUT FILE and /dev/fd/1 for OUTPUT FILE.

		  INPUT FILE is required. If no OUTPUT FILE is provided it becomes the filename
		  portion of INPUT FILE adding "_edit" before the extension. Ex: myvid_edit.mp4

		TIME formats
		  SECONDS
		  MINUTES:SECONDS
		  HOURS:MINUTES:SECONDS

		TIME relativity
		  By default TIME is the duration from the beginning of the file.
		  Prepending a - or + changes the origin and/or direction of TIME.

		  -START TIME   Start at TIME subtracted from FINISH TIME
		  -FINISH TIME  Finish at TIME subtracted from file duration
		  +FINISH TIME  Finish at TIME added to START TIME

		EXAMPLES
		  # Remove the first 10 seconds and everything after 1 hour and 3 minutes
		  ffmpeg-trim -s 10 -f 1:3:0 -i input.mp4 output.mp4

		  # Remove the first 10 seconds, then everything 5 seconds after what was removed
		  ffmpeg-trim -s 10 -f +5 -i input.mp4 output.mp4

		  # Remove the last 10 seconds, then everything 5 seconds before what was removed
		  ffmpeg-trim -s -5 -f -10 -i input.mp4 output.mp4

	HelpDoc
	[[ $1 ]] && exit "$1"
}



print_stderr() {
	if [[ $1 == '0' ]]; then
		[[ $2 ]] && printf "$2" "${@:3}" 1>&2 || :
	else
		[[ $2 ]] && printf '%s'"$2" "ERROR: ${0##*/}, " "${@:3}" 1>&2 || :
		exit "$1"
	fi
}



# Check dependencies and functionalize arithmetic
type ffmpeg 1> /dev/null

if type [: &> /dev/null; then
	calc_solution() {
		SOLUTION=$([: "$1" :])
	}

elif type bc &> /dev/null; then
	calc_solution() {
		SOLUTION=$(bc <<< "$1")
	}

else
	print_stderr 1 '%s\n' 'missing dependency, [: or bc'
fi



start_time=
finish_time=
input_file=
output_file=
ffmpeg_args=()
[[ $1 ]] || help_doc 1
while [[ $1 ]]; do
	case $1 in
		'--start-time'|'-s')
			shift; start_time=$1 ;;
		'--finish-time'|'-f')
			shift; finish_time=$1 ;;
		'--input-file'|'-i')
			shift; input_file=$1
			[[ $input_file == '-' ]] && input_file='/dev/fd/0'
			;;
		'--clobber'|'-c')
			ffmpeg_args+=('-y') ;;
		'--help'|'-h')
			help_doc 0 ;;
		'--')
			shift; break ;;
		'-'?*)
			print_stderr 1 '%s\n' 'unrecognized parameter: '"$1" ;;
		*)
			output_file=$1
			[[ $output_file == '-' ]] && output_file='/dev/fd/1'
	esac
	shift
done

if [[ $1 ]]; then
	output_file=$1
	shift
	[[ $1 ]] && print_stderr 1 '%s\n' 'unrecognized parameter: '"$1"
fi



# Validate and finalize paths
[[ $input_file ]] || print_stderr 1 '%s\n' 'no input file provided'
[[ $input_file == '/dev/fd/0' ]] || [[ -f $input_file ]] || print_stderr 1 '%s\n' 'input file not found'



# If no output path is given, generate one from input filename
if [[ ! $output_file ]]; then
	input_filename=${input_file##*/}
	[[ $input_filename == *'.'* ]] || print_stderr 1 '%s\n' 'output file required if input file has no extension'

	input_file_ext=${input_filename##*.}
	index_of_last_dot=$(( ${#input_filename} - ${#input_file_ext} - 1 ))

	output_file=${input_filename:0:index_of_last_dot}'_edit'${input_filename:index_of_last_dot}
fi



time_to_sec() {
	TIME_TO_SEC__OUT=

	local IFS h m s time_arr_len

	IFS=':'
	time_arr=($1)
	time_arr_len=${#time_arr[@]}
	(( time_arr_len >= 3 )) && h=${time_arr[-3]} || h=0
	(( time_arr_len >= 2 )) && m=${time_arr[-2]} || m=0
	(( time_arr_len >= 1 )) && s=${time_arr[-1]} || s=0

	IFS='.'
	seconds_arr=($s)
	s=${seconds_arr[0]}
	ms=${seconds_arr[1]:-0}

	TIME_TO_SEC__OUT=$(( s + ( ( m + ( h * 60 ) ) * 60 ) ))".${ms}"
}



# Define video duration
input_duration_sec=$( ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "$input_file" )



# Format start and finish time into seconds
if [[ ! $start_time ]]; then
	start_sec=0
else
	time_to_sec "${start_time#*-}"
	start_sec=$TIME_TO_SEC__OUT
fi

if [[ ! $finish_time ]]; then
	finish_sec=$input_duration_sec
else
	time_to_sec "${finish_time#*-}"
	finish_sec=$TIME_TO_SEC__OUT
fi



# Perform relative time conversions
if [[ $finish_time == '-'* ]]; then
	calc_solution "${input_duration_sec} - ${finish_sec}"
	finish_sec=$SOLUTION
fi

if [[ $start_time == '-'* ]]; then
	[[ $finish_time == '+'* ]] && print_stderr 1 '%s\n' 'times cannot be relative to each other: '"$start_time $finish_time"
	calc_solution "${finish_sec} - ${start_sec}"
	start_sec=$SOLUTION
fi

if [[ $finish_time == '+'* ]]; then
	calc_solution "${start_sec} + ${finish_sec}"
	finish_sec=$SOLUTION
fi



# Define duration of clip
calc_solution "${finish_sec} - ${start_sec}"
duration_sec=$SOLUTION



# Enforce at least one whole digit for ffmpeg syntax
[[ ${start_sec:0:1} == '.' ]] && start_sec='0'$start_sec
[[ ${duration_sec:0:1} == '.' ]] && duration_sec='0'$finish_sec



echo Running: ffmpeg "${ffmpeg_args[@]}" -ss "$start_sec" -t "$duration_sec" -i "$input_file" "$output_file"
ffmpeg "${ffmpeg_args[@]}" -ss "$start_sec" -t "$duration_sec" -i "$input_file" "$output_file"



